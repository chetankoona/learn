Level 1 - Communication & Service discovery
Level 2 - Fault tolerance & Resilience
Level 3 - Microservice Configuration

Level 1
	Creating few ms's
	Having them communicate with each other.
	
Spring cloud is one set of or one way of creating microservice.

In microservices we achieve scaling, modularity, 

What is the difference between microservices and web services.

Microservices solves following problem in Monolith,
	Scalability
	Modularity (independently deploying one module i.e service)


Due to because of scalability, modularity issues in Monolith, we moved to MS, but MS has its own set of problems which is generic compared to specific problem in Monolith.

MS - MS is complex, as told in abv point it is generic problems,
	Patterns - Make MS work well together.
	Technologies - Libraries and framework to solve common problems.
	
Difference between MS and Web service.

Best practice , API should not return List<>, If return is Object , then API owner can add a new value in Object, but if API returning List<> then cannot dot this.

Webclient
Resttemplate

Service discovery pattern
Technology to implement service discovery pattern is Eureka
Eureka also maintains heartbeats of services.

Netflix are one of the pioneers in MS, following they created and made it open source - Eureka, ribbon, hysterix, zuul.

Notes:
Lombak
Swagger client
Client side load balancer, ribbon.

Fault tolerance & Resiliance,
Agend:
	Understand challenge with availability.
	Making micro services resilient and fault tolerant.


Problems with micro services,
	One of the MS goes down, as a solution run multiple instances of that MS.
	One of the MS is slow, one of the solution is to set timeout(this will not solve the problem fully).
	Circuit Breaker pattern
		Detect something is wrong
		Take the temporary steps to avoid situtation getting worse.
		Deactivate the "problem" component, so that it does not affect downstream components.
When does the circuit trip,
	Last n requests to consider for the decision
	How many of those should fail
	Timeout duration.
When does the circuit get backs to normal,
	How long after a circuit trip to try again.

When circuit breaks,
	Throw and error
	Return a fallback "default" response
	Return from cache.

Why circuit breakers,
	Failing fast
	Fallback functionality
	Automatic recovery
Circuit break pattern, (framework Hystrix)
	When to break circuit
	What to do when circuit breaks
	When to resume requests
Hystrix
	Opensource library, originally created by netflix
	Implements circuit breaker pattern, so you dont have to
	Give it the configuration params and it does the work
	Works well with spring boot
Adding Hystrix to SB MS,
	add the maven dependency - spring-cloud-started-netflix-hystrix dependency
	Add @EnableCircuitBreaker to the application class
	Add @HystrixCommand to methods that need circuit breakers
	Configure Hystrix behavior
APi marked @HystrixCommand should be in separate service class, because hystrix will create proxy class.
	From a method in a class we cannot call api's (@HystrixCommand) which are in same class (very important)
Hystrix dashboard

BulkHead pattern - separate bucket of threads for each MS - achieved using Hystrix configuration

Level 3:
Microservice configuration with Spring Boot.
Agenda:
	Understanding microservice configuration goals.
	Configuration features in Spring Boot.
		Value, Configprops, Actuator, Spring profiles, Environment.
	Spring cloud config server
	Dynamic configuration
	Best practices and patterns.

Goals:
	Externalised
	Environment specific
	Consistent - consistent accross all vm's
	Version history
	Real time management

What is microservice configuration - 
Why microservice configuration - 

Example configuration:
	Database connections
	Credentials
	Feature flags
	Business logic configuration paramater
	Scenario testing
	Spring Boot confgiguration

Externalised is achieved by uasing application.properties file, but this fiel will be bundled in jar, you can place a copy of this file in location of jar thsi will take precedence, and also we can pass key-value as cmd line argu while starting application.
And also we can set up Environmental variable.

@Value tricks:
	providing default value
	managing list
	managing maps (SPEL - spring expression language)
@ConfigurationProperties - created a bean of properties with specified prefix.
Use actuator to expose endpoint which has ConfigProps configured, this will have all spring boot configuration , you can read through this for understanding.

YAML file is convinient than properties file.

Environment specific configuration using spring profiles.
You can use profile for creating bean. (@Profile annotation)

Other than using @Value & @ConfigurationProperties we can also use Environment object.

Spring cloud config server.


Notes:
	SPEL - spring expression language


============================================In28Minutes============================================

Introduction to Web services

Service definition
	Request / Response format
	Request structure
	Response structure
	Endpoint
	
Key terminology
	Request & Response
	Message exchange format
		XML and JSON
	Service provider
	Service consumer
	Service definition
	Transport
		HTTP & MQ

SOAP
	Data exchange format
		SOAP XML Request
		SOAP XML Response
	Transport
		SOAP over HTTP
		SOAP over MQ
	Service definition
		WSDL - Web Service Definition Language
			Endpoint
			All operations
			Request structure
			Response structure

REST - REpresentational State Transfer
	Data exchange format
		No restriction, JSON is popular
	Transport
		Only HTTP
	Service definition
		No standard. WADL / SWAGGER / ...

To debug spring framework, in application.properties - logging.level.org.springframework = debug

Dispatcher Servlet




















============================================In28Minutes============================================
